package generator

import "text/template"

var tpl = template.Must(template.New("generated").
	Funcs(template.FuncMap{
		"lcFirst": lcFirst,
	}).
	Parse(`
// Code generated by github.com/gallery-so/dataloaden, DO NOT EDIT.

package {{.Package}}

import (
    "sync"
    "time"
	"context"

    {{if .KeyType.ImportPath}}"{{.KeyType.ImportPath}}"{{end}}
    {{if .ValType.ImportPath}}"{{.ValType.ImportPath}}"{{end}}
)

type {{.Name}}Settings interface {
	getWait() time.Duration
	getMaxBatchOne() int
	getMaxBatchMany() int
	getDisableCaching() bool
	getPublishResults() bool
	getSubscriptionRegistry() *[]interface{}
}

// {{.Name}}Funcs captures the functions required to fetch and cache data
type {{.Name}}Funcs struct {
	// Fetch is a function that provides the data for the loader 
	Fetch func(ctx context.Context, keys []{{.KeyType.String}}) ([]{{.ValType.String}}, []error)

	{{- if not .ValType.IsSlice }}
	// CachePublishedResultsWithKey is a function that returns the {{.KeyType.String}} cache key for a {{.ValType.String}}.
	// If CachePublishedResultsWithKey is not nil, this loader will automatically cache published results from other loaders
	// that return a {{.ValType.String}}, using this function to determine the key to cache the value with.
	CachePublishedResultsWithKey func({{.ValType.String}}) {{.KeyType.String}}
	{{- end }}
}

func (l *{{.Name}}) setWait(wait time.Duration) {
	l.wait = wait
}

func (l *{{.Name}}) setMaxBatch(maxBatch int) {
	l.maxBatch = maxBatch
}

func (l *{{.Name}}) setDisableCaching(disableCaching bool) {
	l.disableCaching = disableCaching
}

func (l *{{.Name}}) setPublishResults(publishResults bool) {
	l.publishResults = publishResults
}

// New{{.Name}} creates a new {{.Name}} with the given settings, functions, and options
func New{{.Name}}(
	ctx context.Context, settings {{.Name}}Settings,
	funcs {{.Name}}Funcs,
	opts ...func(interface{
		setWait(time.Duration)
		setMaxBatch(int)
		setDisableCaching(bool)
		setPublishResults(bool)
	}),
	) *{{.Name}} {
	loader := &{{.Name}}{
		fetch: func(keys []{{.KeyType.String}}) ([]{{.ValType.String}}, []error) { return funcs.Fetch(ctx, keys) },
		wait: settings.getWait(),
		disableCaching: settings.getDisableCaching(),
		publishResults: settings.getPublishResults(),
		subscriptionRegistry: settings.getSubscriptionRegistry(),
		{{- if .ValType.IsSlice }}
		maxBatch: settings.getMaxBatchMany(),
		{{- else }}
		maxBatch: settings.getMaxBatchOne(),
		{{- end }}
	}

	for _, opt := range opts {
		opt(loader)
	}

	if loader.subscriptionRegistry == nil {
		panic("subscriptionRegistry may not be nil")
	}

	{{ if .ValType.IsSlice }}
	// No cache functions here; caching isn't very useful for dataloaders that return slices. This dataloader can
	// still send its results to other cache-priming receivers, but it won't register its own cache-priming function.
	{{- else }}
	if !loader.disableCaching && funcs.CachePublishedResultsWithKey != nil {
		cacheFunc := func(t {{.ValType.String}}) { loader.Prime(funcs.CachePublishedResultsWithKey(t), t)}
		loader.cacheFunc = &cacheFunc
		*loader.subscriptionRegistry = append(*loader.subscriptionRegistry, loader.cacheFunc)

		// If we're caching many entries, only acquire the lock once
		cacheManyFunc := func(t []{{.ValType.String}}) {
			loader.mu.Lock()
			for _, value := range t {
				key := funcs.CachePublishedResultsWithKey(value)
				if _, found := loader.cache[key]; !found {
				{{- if .ValType.IsPtr }}
					// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
					// and end up with the whole cache pointing to the same value.
					cpy := *value
					loader.unsafeSet(key, &cpy)
				{{- else if .ValType.IsSlice }}
					// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
					// and end up with the whole cache pointing to the same value.
					cpy := make({{.ValType.String}}, len(value))
					copy(cpy, value)
					loader.unsafeSet(key, cpy)
				{{- else }}
					loader.unsafeSet(key, value)
				{{- end }}
				}
			}
			loader.mu.Unlock()
		}
		loader.cacheManyFunc = &cacheManyFunc
		*loader.subscriptionRegistry = append(*loader.subscriptionRegistry, loader.cacheManyFunc)
	}
	{{- end }}

	return loader
}

// {{.Name}} batches and caches requests          
type {{.Name}} struct {
	// this method provides the data for the loader
	fetch func(keys []{{.KeyType.String}}) ([]{{.ValType.String}}, []error)

	// how long to wait before sending a batch
	wait time.Duration

	// this will limit the maximum number of keys to send in one batch, 0 = no limit
	maxBatch int

	// whether this dataloader will cache results
	disableCaching bool

	// whether this dataloader will publish its results for others to cache
	publishResults bool

	// a shared slice where dataloaders will register and invoke caching functions.
	// the same slice should be passed to every dataloader.
	subscriptionRegistry *[]interface{}

	// INTERNAL

	// lazily created cache
	cache map[{{.KeyType.String}}]{{.ValType.String}}

	// typed cache functions
	subscribers []func({{.ValType.String}})

	// functions used to cache published results from other dataloaders
	cacheFunc *func(t {{.ValType.String}})
	cacheManyFunc *func(t []{{.ValType.String}})

	// the current batch. keys will continue to be collected until timeout is hit,
	// then everything will be sent to the fetch method and out to the listeners
	batch *{{.Name|lcFirst}}Batch

	// mutex to prevent races
	mu sync.Mutex

	// only initialize our typed subscription cache once
	once sync.Once
}

type {{.Name|lcFirst}}Batch struct {
	keys    []{{.KeyType}}
	data    []{{.ValType.String}}
	error   []error
	closing bool
	done    chan struct{}
}

// Load a {{.ValType.Name}} by key, batching and caching will be applied automatically
func (l *{{.Name}}) Load(key {{.KeyType.String}}) ({{.ValType.String}}, error) {
	return l.LoadThunk(key)()
}

// LoadThunk returns a function that when called will block waiting for a {{.ValType.Name}}.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *{{.Name}}) LoadThunk(key {{.KeyType.String}}) func() ({{.ValType.String}}, error) {
	l.mu.Lock()
	if !l.disableCaching {
		if it, ok := l.cache[key]; ok {
			l.mu.Unlock()
			return func() ({{.ValType.String}}, error) {
				return it, nil
			}
		}
	}
	if l.batch == nil {
		l.batch = &{{.Name|lcFirst}}Batch{done: make(chan struct{})}
	}
	batch := l.batch
	pos := batch.keyIndex(l, key)
	l.mu.Unlock()

	return func() ({{.ValType.String}}, error) {
		<-batch.done

		var data {{.ValType.String}}
		if pos < len(batch.data) {
			data = batch.data[pos]
		}

		var err error
		// its convenient to be able to return a single error for everything
		if len(batch.error) == 1 {
			err = batch.error[0]
		} else if batch.error != nil {
			err = batch.error[pos]
		}

		if err == nil {
			if !l.disableCaching {
				l.mu.Lock()
				l.unsafeSet(key, data)
				l.mu.Unlock()
			}

			if l.publishResults {
				l.publishToSubscribers(data)
			}
		}

		return data, err
	}
}

// LoadAll fetches many keys at once. It will be broken into appropriate sized
// sub batches depending on how the loader is configured
func (l *{{.Name}}) LoadAll(keys []{{.KeyType}}) ([]{{.ValType.String}}, []error) {
	results := make([]func() ({{.ValType.String}}, error), len(keys))

	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}

	{{.ValType.Name|lcFirst}}s := make([]{{.ValType.String}}, len(keys))
	errors := make([]error, len(keys))
	for i, thunk := range results {
		{{.ValType.Name|lcFirst}}s[i], errors[i] = thunk()
	}
	return {{.ValType.Name|lcFirst}}s, errors
}

// LoadAllThunk returns a function that when called will block waiting for a {{.ValType.Name}}s.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *{{.Name}}) LoadAllThunk(keys []{{.KeyType}}) (func() ([]{{.ValType.String}}, []error)) {
	results := make([]func() ({{.ValType.String}}, error), len(keys))
 	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}
	return func() ([]{{.ValType.String}}, []error) {
		{{.ValType.Name|lcFirst}}s := make([]{{.ValType.String}}, len(keys))
		errors := make([]error, len(keys))
		for i, thunk := range results {
			{{.ValType.Name|lcFirst}}s[i], errors[i] = thunk()
		}
		return {{.ValType.Name|lcFirst}}s, errors
	}
}

// Prime the cache with the provided key and value. If the key already exists, no change is made
// and false is returned.
// (To forcefully prime the cache, clear the key first with loader.clear(key).prime(key, value).)
func (l *{{.Name}}) Prime(key {{.KeyType}}, value {{.ValType.String}}) bool {
	if l.disableCaching {
		return false
	}
	l.mu.Lock()
	var found bool
	if _, found = l.cache[key]; !found {
		{{- if .ValType.IsPtr }}
			// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
			// and end up with the whole cache pointing to the same value.
			cpy := *value
			l.unsafeSet(key, &cpy)
		{{- else if .ValType.IsSlice }}
			// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
			// and end up with the whole cache pointing to the same value.
			cpy := make({{.ValType.String}}, len(value))
			copy(cpy, value)
			l.unsafeSet(key, cpy)
		{{- else }}
			l.unsafeSet(key, value)
		{{- end }}
	}
	l.mu.Unlock()
	return !found
}

// Clear the value at key from the cache, if it exists
func (l *{{.Name}}) Clear(key {{.KeyType}}) {
	if l.disableCaching {
		return
	}
	l.mu.Lock()
	delete(l.cache, key)
	l.mu.Unlock()
}

func (l *{{.Name}}) unsafeSet(key {{.KeyType}}, value {{.ValType.String}}) {
	if l.cache == nil {
		l.cache = map[{{.KeyType}}]{{.ValType.String}}{}
	}
	l.cache[key] = value
}

// keyIndex will return the location of the key in the batch, if its not found
// it will add the key to the batch
func (b *{{.Name|lcFirst}}Batch) keyIndex(l *{{.Name}}, key {{.KeyType}}) int {
	for i, existingKey := range b.keys {
		if key == existingKey {
			return i
		}
	}

	pos := len(b.keys)
	b.keys = append(b.keys, key)
	if pos == 0 {
		go b.startTimer(l)
	}

	if l.maxBatch != 0 && pos >= l.maxBatch-1 {
		if !b.closing {
			b.closing = true
			l.batch = nil
			go b.end(l)
		}
	}

	return pos
}

func (b *{{.Name|lcFirst}}Batch) startTimer(l *{{.Name}}) {
	time.Sleep(l.wait)
	l.mu.Lock()

	// we must have hit a batch limit and are already finalizing this batch
	if b.closing {
		l.mu.Unlock()
		return
	}

	l.batch = nil
	l.mu.Unlock()

	b.end(l)
}

func (b *{{.Name|lcFirst}}Batch) end(l *{{.Name}}) {
	b.data, b.error = l.fetch(b.keys)
	close(b.done)
}

func (l *{{.Name}}) publishToSubscribers(value {{.ValType.String}}) {
	// Lazy build our list of typed cache functions once
	l.once.Do(func() {
		for _, subscription := range *l.subscriptionRegistry {
			if typedFunc, ok := subscription.(*func({{.ValType.String}})); ok {
				// Don't invoke our own cache function
				if typedFunc != l.cacheFunc {
					l.subscribers = append(l.subscribers, *typedFunc)
				}
			}
		}
	})

	for _, f := range l.subscribers {
		f(value)
	}
}
`))
